[build-system]
requires = ["setuptools>=66.1", "wheel", "setuptools_scm"]
build-backend = "setuptools.build_meta"

[project]
name = "graphix"
authors = [{ name = "Shinichi Sunami", email = "shinichi.sunami@gmail.com" }]
maintainers = [
  { name = "Shinichi Sunami", email = "shinichi.sunami@gmail.com" },
]
license = { file = "LICENSE" }
description = "Optimize and simulate measurement-based quantum computation"
readme = "README.md"
classifiers = [
  "Development Status :: 4 - Beta",
  "Environment :: Console",
  "Intended Audience :: Science/Research",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "License :: OSI Approved :: Apache Software License",
  "Operating System :: OS Independent",
  "Topic :: Scientific/Engineering :: Physics",
]
requires-python = ">=3.9,<3.13"
dynamic = ["version", "dependencies", "optional-dependencies"]

[project.urls]
Documentation = "https://graphix.readthedocs.io"
"Bug Tracker" = "https://github.com/TeamGraphix/graphix/issues"

[tool.setuptools_scm]
version_file = "graphix/_version.py"

[tool.setuptools.dynamic]
dependencies = { file = ["requirements.txt"] }

[tool.setuptools.dynamic.optional-dependencies]
dev = { file = ["requirements-dev.txt"] }
extra = { file = ["requirements-extra.txt"] }

[tool.ruff]
line-length = 120
extend-exclude = ["docs"]

[tool.ruff.lint]
extend-select = [
  "A",
  "B",
  "C4",
  "D",
  "FA",
  "FLY",
  "FURB",
  "ICN",
  "INT",
  "ISC",
  "I",
  "NPY",
  "N",
  "PERF",
  "PGH",
  "PIE",
  "PLE",
  "PLR",
  "PLW",
  "PYI",
  "RET",
  "RUF",
  "SIM",
  "TC",
  "TID",
  "TID",
  "UP",
  "W",
  "YTT",
]
extend-ignore = [
  "E74",     # Ambiguous name
  "PLR091",  # Too many XXX
  "PLR2004", # Magic vavlue comparison
]
# Allow "α" (U+03B1 GREEK SMALL LETTER ALPHA) which could be confused for "a"
allowed-confusables = ["α"]

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint.extend-per-file-ignores]
"__init__.py" = [
  "F401", # Unused import
]
"benchmarks/*.py" = [
  "D", # Benchmarks follow Sphinx doc conventions
]
"examples/*.py" = [
  "B018", # Useless expression
  "D",    # Examples follow Sphinx doc conventions
  "E402", # Import not at top of file
]
"tests/*.py" = [
  "D10", # Allow undocumented items
]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.pytest.ini_options]
# Silence cotengra warning
filterwarnings = ["ignore:Couldn't import `kahypar`"]

[tool.mypy]
# Keep in sync with pyright
files = [
  "graphix/channels.py",
  "graphix/clifford.py",
  "graphix/command.py",
  "graphix/fundamentals.py",
  "graphix/instruction.py",
  "graphix/linalg_validations.py",
  "graphix/measurements.py",
  "graphix/ops.py",
  "graphix/parameter.py",
  "graphix/pauli.py",
  "graphix/pyzx.py",
  "graphix/rng.py",
  "graphix/states.py",
  "graphix/utils.py",
  "graphix/**/__init__.py",
  "graphix/_db.py",
  "noxfile.py",
  "tests/conftest.py",
  "tests/test_clifford.py",
  "tests/test_command.py",
  "tests/test_db.py",
  "tests/test_fundamentals.py",
  "tests/test_kraus.py",
  "tests/test_parameter.py",
  "tests/test_pauli.py",
  "tests/test_pyzx.py",
  "tests/test_rng.py",
]
follow_imports = "silent"
follow_untyped_imports = true # required for qiskit, requires mypy >=1.14
strict = true

[tool.pyright]
# Keep in sync with mypy
include = [
  "graphix/channels.py",
  "graphix/clifford.py",
  "graphix/command.py",
  "graphix/fundamentals.py",
  "graphix/instruction.py",
  "graphix/linalg_validations.py",
  "graphix/measurements.py",
  "graphix/ops.py",
  "graphix/parameter.py",
  "graphix/pauli.py",
  "graphix/pyzx.py",
  "graphix/rng.py",
  "graphix/states.py",
  "graphix/utils.py",
  "graphix/**/__init__.py",
  "graphix/_db.py",
  "noxfile.py",
  "tests/conftest.py",
  "tests/test_clifford.py",
  "tests/test_command.py",
  "tests/test_db.py",
  "tests/test_fundamentals.py",
  "tests/test_kraus.py",
  "tests/test_parameter.py",
  "tests/test_pauli.py",
  "tests/test_pyzx.py",
  "tests/test_rng.py",
]

[tool.coverage.report]
exclude_also = [
  "if TYPE_CHECKING:",
  "raise NotImplementedError\\(.*\\)",
  "return NotImplemented",
  "typing_extensions.assert_never\\(.*\\)",
  "@abc.abstractmethod",
]
