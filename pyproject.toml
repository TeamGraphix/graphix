[build-system]
requires = ["setuptools>=77", "wheel", "setuptools_scm"]
build-backend = "setuptools.build_meta"

[project]
name = "graphix"
authors = [{ name = "Shinichi Sunami", email = "shinichi.sunami@gmail.com" }]
maintainers = [
  { name = "Shinichi Sunami", email = "shinichi.sunami@gmail.com" },
]
license-files = ["LICENSE"]
description = "Optimize and simulate measurement-based quantum computation"
readme = "README.md"
classifiers = [
  "Development Status :: 4 - Beta",
  "Environment :: Console",
  "Intended Audience :: Science/Research",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Operating System :: OS Independent",
  "Topic :: Scientific/Engineering :: Physics",
]
requires-python = ">=3.9,<3.14"
dynamic = ["version", "dependencies", "optional-dependencies"]

[project.urls]
Documentation = "https://graphix.readthedocs.io"
"Bug Tracker" = "https://github.com/TeamGraphix/graphix/issues"

[tool.setuptools_scm]
version_file = "graphix/_version.py"

[tool.setuptools.dynamic]
dependencies = { file = ["requirements.txt"] }

[tool.setuptools.dynamic.optional-dependencies]
dev = { file = ["requirements-dev.txt"] }
extra = { file = ["requirements-extra.txt"] }
doc = { file = ["requirements-doc.txt"] }

[tool.setuptools.packages.find]
include = ["graphix", "stubs"]

[tool.ruff]
line-length = 120
extend-exclude = ["docs"]

[tool.ruff.lint]
preview = true
select = ["ALL"]
extend-ignore = [
  "C90",     # Complexity
  "E74",     # Ambiguous name
  "ERA",     # Commmented out code
  "FBT",     # Boolean positional arguments
  "FIX",     # Fixme
  "PLR091",  # Too many XXX
  "PLR0904", # Too many public methods
  "PLR2004", # Magic vavlue comparison
  "S101",    # assert
  "T20",     # print
  "TD",      # Todo

  # Tentative ignores
  "ANN",     # Missing annotations
  "CPY",     # Copyright
  "DOC",     # Docstring
  "E501",    # Line too long
  "EM10",    # Raise string
  "PLR1702", # Too many nests
  "PLW1641", # __hash__ missing
  "PT011",   # pytest raises too broad
  "SLF001",  # Private access
  "TRY003",  # Raise vanilla args

  # Conflicts with ruff format
  "COM812",
  "COM819",
  "D206",
  "D300",
  "E111",
  "E114",
  "E117",
  "ISC001",
  "ISC002",
  "Q000",
  "Q001",
  "Q002",
  "Q003",
  "W191",
]
# Allow "α" (U+03B1 GREEK SMALL LETTER ALPHA) which could be confused for "a"
allowed-confusables = ["α"]

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint.extend-per-file-ignores]
"benchmarks/*.py" = [
  "D",   # Benchmarks follow Sphinx doc conventions
  "INP", # Missing __init__.py
]
"examples/*.py" = [
  "ARG",  # Unused arguments
  "B018", # Useless expression
  "D",    # Examples follow Sphinx doc conventions
  "E402", # Import not at top of file
  "INP",  # Missing __init__.py
]
"tests/*.py" = [
  "D10",     # Allow undocumented items
  "PLC2701", # Allow private imports
  "PLR6301", # self not used
]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.isort]
required-imports = ["from __future__ import annotations"]

[tool.pytest.ini_options]
addopts = ["--ignore=examples", "--ignore=docs", "--ignore=benchmarks"]
# Silence cotengra warning
filterwarnings = ["ignore:Couldn't import `kahypar`"]

[tool.mypy]
# Keep in sync with pyright
files = ["*.py", "examples", "graphix", "tests"]
exclude = [
  '^examples/deutsch_jozsa\.py$',
  '^examples/ghz_with_tn\.py$',
  '^examples/mbqc_vqe\.py$',
  '^examples/qaoa\.py$',
  '^examples/qft_with_tn\.py$',
  '^examples/qnn\.py$',
  '^examples/rotation\.py$',
  '^examples/tn_simulation\.py$',
  '^examples/visualization\.py$',
  '^graphix/device_interface\.py$',
  '^graphix/gflow\.py$',
  '^graphix/linalg\.py$',
  '^graphix/random_objects\.py$',
  '^graphix/visualization\.py$',
  '^tests/test_density_matrix\.py$',
  '^tests/test_gflow\.py$',
  '^tests/test_linalg\.py$',
  '^tests/test_noisy_density_matrix\.py$',
  '^tests/test_random_utilities\.py$',
  '^tests/test_runner\.py$',
  '^tests/test_statevec\.py$',
  '^tests/test_statevec_backend\.py$',
  '^tests/test_tnsim\.py$',
  '^tests/test_visualization\.py$',
]
follow_imports = "silent"
follow_untyped_imports = true # required for qiskit, requires mypy >=1.14
strict = true
mypy_path = "./stubs"

[tool.pyright]
# Keep in sync with mypy
include = ["*.py", "examples", "graphix", "tests"]
exclude = [
  "examples/deutsch_jozsa.py",
  "examples/ghz_with_tn.py",
  "examples/mbqc_vqe.py",
  "examples/qaoa.py",
  "examples/qft_with_tn.py",
  "examples/qnn.py",
  "examples/rotation.py",
  "examples/tn_simulation.py",
  "examples/visualization.py",
  "graphix/device_interface.py",
  "graphix/gflow.py",
  "graphix/linalg.py",
  "graphix/random_objects.py",
  "graphix/visualization.py",
  "tests/test_density_matrix.py",
  "tests/test_gflow.py",
  "tests/test_linalg.py",
  "tests/test_noisy_density_matrix.py",
  "tests/test_random_utilities.py",
  "tests/test_runner.py",
  "tests/test_statevec.py",
  "tests/test_statevec_backend.py",
  "tests/test_tnsim.py",
  "tests/test_transpiler.py",
  "tests/test_visualization.py",
]
reportUnknownArgumentType = "information"
reportUnknownLambdaType = "information"
reportUnknownMemberType = "information"
reportUnknownParameterType = "information"
reportUnknownVariableType = "information"
extraPaths = ["./stubs"]

[tool.coverage.report]
exclude_also = [
  "if TYPE_CHECKING:",
  "raise NotImplementedError\\(.*\\)",
  "return NotImplemented",
  "typing_extensions.assert_never\\(.*\\)",
  "@abc.abstractmethod",
]
